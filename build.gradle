/*
 Copyright 2016 Battams, Derek
 
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
 
		http://www.apache.org/licenses/LICENSE-2.0
 
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

import java.text.SimpleDateFormat
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'groovy'
    id 'war'
    id 'eclipse'
    id 'net.nemerosa.versioning' version '1.3.0'
    id 'com.jfrog.bintray' version '1.5'
}

defaultTasks 'clean', 'test', 'war', 'pluginXml'

versioning {
	releaseMode = 'snapshot'
}

sourceCompatibility = 1.7
version = versioning.info.display

ext.userOrg = 'opensagetv'
ext.repoName = 'sagetv-plugins'
ext.pluginVersion = '1.0'
ant.properties['download-url-location'] = "http://bintray.com/artifact/download/${ext.userOrg}/${ext.repoName}/${project.name}-${ext.pluginVersion}".toString()
ant.properties['version'] = version //`ext.pluginVersion
ant.properties['pluginVersion'] = ext.pluginVersion
ant.properties['last-modified'] = lastModified()

repositories {
	mavenCentral()
	jcenter()
}

sourceSets {
	main {
		groovy {
			srcDirs = ['src/main/groovy', 'src/main/java']
		}
		java {
			srcDirs = [] // we need to cross compile java and groovy together
		}
	}
}

dependencies {
	providedCompile 'org.eclipse.jetty:jetty-server:8.1.16.v20140903'
	providedCompile 'org.eclipse.jetty:jetty-servlet:8.1.16.v20140903'
	providedCompile 'org.eclipse.jetty:jetty-jsp:8.1.16.v20140903'

	compile 'org.codehaus.groovy:groovy-all:2.0.5'
	compile 'log4j:log4j:1.2.17'
	compile 'com.mchange:c3p0:0.9.5.2'
	compile 'net.sf.ehcache:ehcache:2.10.0'
	compile 'com.google.code.gson:gson:2.6.2'
	compile 'javax.transaction:jta:1.1'
	compile 'commons-io:commons-io:2.4'
	runtime 'org.apache.derby:derby:10.11.1.1'
	runtime 'org.slf4j:slf4j-log4j12:1.7.9'

	testCompile 'junit:junit:4.+'
	testCompile 'org.spockframework:spock-maven:0.7-groovy-2.0'
	testCompile 'commons-net:commons-net:3.3'
	testCompile 'org.gebish:geb-core:0.10.0'
	testCompile 'org.gebish:geb-spock:0.10.0'
	testCompile 'org.seleniumhq.selenium:selenium-support:2.44.0'
	testCompile 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.44.0'
}

versionFile {
	def props = new File(sourceSets.main.resources.srcDirs[0], 'svc-versioning.properties')
	outputs.file props
	outputs.upToDateWhen { false }
	file = props
}

project.tasks['bintrayUpload'].doFirst {
    if(!project.hasProperty('bintray.user')) {
        throw new GradleException("Property 'bintray.user' is not set. In order to upload to bintray, this must be set in ~/.gradle/gradle.properties")
    }
    if(!project.hasProperty('bintray.key')) {
        throw new GradleException("Property 'bintray.key' is not set. In order to upload to bintray, this must be set in ~/.gradle/gradle.properties")
    }
}

bintray {
    user = project.properties['bintray.user']
    key = project.properties['bintray.key']
    pkg {
        repo = project.ext.repoName
        name = project.name
        userOrg = project.ext.userOrg
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/livepvrdata-oss/livepvrdata-svc'

        version {
             name = project.ext.pluginVersion
             desc = 'Test Release of WebUI to experiment with bintray maven'
             released  = new Date()

             //configurations = ['pluginArtifacts']
             filesSpec {
                 from buildDir
                 into "${project.name}-${project.ext.pluginVersion}"
                 include 'plugin.xml'
                 include '*.zip'
             }
             publish = true
             publicDownloadNumbers = true
        }
     }
 }

String resourcesDir = sourceSets.main.output.resourcesDir
war {
	archiveName = 'livepvrdata.war'
	webXml = file("$resourcesDir/web.xml")
}

compileJava.dependsOn versionFile

task cpWarToDocker(type: Copy) {
	def outDir = new File(project.buildDir, 'docker/war')
	dependsOn war
	from(new File(project.buildDir, 'libs').absolutePath) {
		include war.archiveName
	}
	into(outDir.absolutePath)
	outputs.files(new File(outDir, war.archiveName))
}

task setupDockerEnv(type: Copy) {
	from(new File(project.projectDir, 'docker'))
	into(new File(project.buildDir, 'docker'))
}

task mkDockerImg(type: Exec) {
	dependsOn setupDockerEnv, cpWarToDocker
	workingDir = new File(project.buildDir, 'docker')
	commandLine 'docker', 'build', '-t', 'slugger/livepvrdata-svc', '.'
	doFirst {
		if(!System.getProperty('os.name').toLowerCase().contains('linux'))
			throw new UnsupportedOperationException('Can only build docker images on Linux!')
	}
}

task zipWar(type:Zip, dependsOn: war) {
    destinationDir = project.buildDir
    baseName = "$project.name-war"
    from(war.outputs.files) { into 'jetty/webapps' }

    checksum(zipWar, 'war-file-checksum')
}

task zipContext(type:Zip, dependsOn: processResources) {
    destinationDir = project.buildDir
    baseName = "$project.name-context"
    from("$resourcesDir/livepvrdata.context.xml") { into 'jetty/contexts' }

    checksum(zipContext, 'context-file-checksum')
}

task pluginXml(type:Copy, dependsOn: [zipWar, zipContext]) {
    from 'src/main/plugin/plugin.xml'
    into project.buildDir

    eachFile {
        filter(ReplaceTokens, tokens: ant.properties)
    }
}

private void checksum(Task task, String propName) {
    task.doLast {
        //Have to do this last so that the files to be MD5 summed will exist
        task.outputs.files.each { file ->
            ant.checksum file: file, property:propName, algorithm:'MD5'
        }
    }
}

private String lastModified() {
    return new SimpleDateFormat("YYYY.MM.dd").format(new Date())
}
